---
title: "Proteins - Part IIa: TM proteins"
format: html
---

<hr>

In case of issues, please contact [paulo.telles-de-souza\@ibcp.fr](mailto:%20paulo.telles-de-souza@ibcp.fr).

<hr>

## Summary

-   [`Introduction`](#introduction)
-   [`Setting up your protein model`](#setup)
    -   [`Water biasing to correct model artifacts`](#waterbias)
-   [`Insert your protein in a membrane environment`](#proteins-in-membrane-environment)
    -   [`Self-assembly approach`](#self-assembly-approach)
    -   ['Pre-built approach'](#pre-built-approach)
-   [`Tools and scripts used in this tutorial`](#tools-and-scripts-used-in-this-tutorial)
-   [`References`](#references)

## Introduction {#introduction}

In this module of the Proteins tutorial, we will increase the complexity of our system by embedding a protein in a lipid bilayer. For background on setting up membranes, please refer to the [Lipids part I](../LipidsI/index.qmd) and [Lipids part II](../LipidsII/index.qmd) tutorials. Here we will explore the tilt and dimerization of KALP peptides <sup>[\[1,2\]](#references)</sup> embedded in a POPC membrane. Eukaryotic plasma membranes (PM) are often approximated by a pure POPC bilayer, as POPC is one of the most abundant phospholipids in the PM. Alternatively, pure DOPC bilayers are sometimes used, as their average physical properties can resemble those of a PM, even though DOPC itself is not especially prevalent in eukaryotic cells <sup>[\[3\]](#references)</sup>.

## Setting up your protein model {#setup}

The coarse-grained structure and topology of KALP can be easily generated from an all-atom structure using `martinize2`, as explored in the previous protein tutorials.

``` bash
martinize2 -ff martini3001 -f kalp-AA.pdb -x kalp.pdb -p backbone -o system.top -ss CCHHHHHHHHHHHHHHHHHHHCC
```

In simulations involving peptides, it is important to carefully define the secondary structure. Since peptides can be highly flexible, your structural assumptions must be well justified. For transmembrane (TM) peptides like KALP, which typically contain 20 to 30 residues (23 residues in the example used in this tutorial), the terminal regions are expected to be relatively disordered, while the hydrophobic TM core should adopt a stable helical conformation. For other TM peptides, it may be useful to include longer terminal regions or apply terminal capping, depending on the system under study. As such, we will assign the secondary structure string using the `-ss` flag in `martinize2`, for example: `-ss CCHHHHHHHHHHHHHHHHHHHC`.

Elastic network <sup>[\[4\]](#references)</sup>, Gō <sup>[\[5\]](#references)</sup> or OLIVES models <sup>[\[6\]](#references)</sup> are not necessary in this case, as the bonded parameters in the Martini model are usually sufficient to maintain the structural integrity of simple helices.

### Water biasing to correct model artifacts. {#waterbias}

Small peptides, particularly those with uncharged terminal regions, may fail to insert properly into lipid bilayers in Martini 3 and instead become adsorbed at the membrane surface or even get ejected during the simulation<sup>[\[7\]](#references)</sup>.

To enhance the insertion of peptides into lipid bilayers, a water bias can be applied to reduce the strength of protein-water interactions in selected regions of the peptide. This is particularly useful for transmembrane peptides or small transmembrane proteins that may otherwise remain adsorbed at the membrane interface. The bias is implemented via virtual backbone sites<sup>[\[5\]](#references)</sup> which allow tuning of Lennard-Jones interactions with water beads without altering bonded interactions.

In `martinize2`, this is done using the `-water-bias` flag along with `-water-bias-eps`, specifying a bias for each secondary structure category. For example:

```bash
martinize2 -ff martini3001 -f kalp-AA.pdb -x kalp.pdb -p backbone -o system.top -ss CCHHHHHHHHHHHHHHHHHHHCC \
-water-bias -water-bias-eps E:-.5 C:1.0 H:-1.0
```

This applies a 0.5, 1.0 and -1.0 kJ/mol water bias to extended, coil and helical residues, respectively. These are the recommended default settings. In our case, decreasing the backbone interactions with water in the helical regions helps promote membrane insertion by reducing the tendency of the peptide to remain at the membrane surface.

Adding this bias generates additional files, `virtual_sites_atomtypes.itp` and `virtual_sites_nonbond_params.itp` which include the definition of the virtual sites. These must be included in the `martini_v3.0.0.itp` file.

## Insert your protein in a membrane environment {#proteins-in-membrane-environment}

After generating the coarse-grained structure and topology of KALP, we can proceed by embedding the protein into a membrane environment. Specifically, into a lipid bilayer. There are different ways to achieve this, and in this tutorial, we present two common approaches, which are described in the following sections:

### Self-assembly approach {#self-assembly-approach}

<hr>

A bilayer self-assembly dynamics, as introduced in the first module of the [lipid tutorial part I](../LipidsI/index.qmd), will lead to the spontaneous insertion of the KALP peptide into the the bilayer (Fig. 1). **The files required for this tutorial (including worked files) can be downloaded from [here](https://cgmartini-library.s3.ca-central-1.amazonaws.com/0_Tutorials/m3_tutorials/ProteinsII/M3_proteins_tutorial_part2.zip).**

The first step is to create a simulation box containing your CG KALP model, POPC, water, and ions, randomly distributed throughout the box. This can be done using the following commands:

``` bash
gmx editconf -f kalp.pdb -o kalp.gro -d 1.5

# Inserts 156 POPC molecules around KALP in a 7 × 7 × 6 nm box.
gmx insert-molecules -f kalp.gro -ci popc.gro -nmol 156 -box 7 7 6 -try 500 -o system_no-solvent.gro

# Extends the box in the z-direction to allow for some extra space for solvation
gmx editconf -f system_no-solvent.gro -o system_no-solvent.gro -c -box 7 7 10

# Adds water beads to the system, avoiding overlaps within a 0.21 nm radius.
gmx solvate -cp system_no-solvent.gro -cs water.gro -o system_solvated.gro -radius 0.21
```

![Figure 1 \| A) Self-assembly (4 ns) of a lipid bilayer (green) embedding a KALP peptide. B) Initial "soup" of lipid and solvent (water; blue) in which the KALP (red) is mixed. C) Final conformation of the simulation.](fig1.png)

The `.top` file must be updated to include the necessary Martini 3 `.itp` files. You should also replace 4 water beads with CL ions in the `.top` file to neutralize the system. 

``` bash
sed -i -e 's/martini\.itp/martini_v3.0.0.itp/' system.top

NLIPIDS=$(($(grep -c POPC system_solvated.gro)/12))
NWATERS=$(grep -c W system_solvated.gro)

echo -e "\nPOPC   $NLIPIDS \nW  $NWATERS" >> system.top
```

Now, run the minimization, equilibration and production simulations. 

``` bash
# Minimization
gmx grompp -f minimization.mdp -c system_solvated.gro -p system.top -o minimization.tpr 
gmx mdrun -deffnm minimization -v

# Equilibraton
gmx grompp -f equilibration.mdp -c minimization.gro -p system.top -o equilibration.tpr -n index.ndx
gmx mdrun -deffnm equilibration -v

# Production
gmx grompp -f dynamic.mdp -c equilibration.gro -p system.top -o dynamic.tpr -n index.ndx
gmx mdrun -deffnm dynamic -v
```

### Pre-built approach {#Prebuilt-approach}

<hr>

This second method is the easiest and most straightforward, and it is the recommended approach for building protein-in-membrane systems. It makes use of membrane builder programs, such as `insane` or `COBY`, which are designed to construct complex Martini systems efficiently.

These tools can automatically generate a pre-assembled bilayer with one or more proteins already inserted into the membrane, typically positioned at the center or at user-defined locations. They allow you to customize the number of proteins, their orientation, and lateral placement within the bilayer. In addition, you can define the lipid composition, box dimensions, water content, and ionic strength, all in a single step. This greatly simplifies system setup and reduces the chance of user errors.

<hr>

#### Option 1: `Insane`

The basic procedure using `insane` is outlined below:

The syntax of the `insane.py` <sup>[\[8\]](#references)</sup> script is very similar to what was used so far; it can be invoked by running `insane.py -h`. (Get the latest from the [Downloads](../../../downloads/tools/topology-structure-generation.qmd#insane) page.) Let's see a practical example:

``` bash
python2 insane.py -f kalp.gro -o system.gro -p system.top -pbc square -box 7,7,9 -l POPC -u POPC -center -sol W -salt 0.01
```

The previous command line will set up a complete system, containing a squared POPC bilayer of $7×7 nm^2$, with the KALP peptide inserted and centered in this bilayer. The whole system will be solvated in standard coarse-grained water. A small concentration of NaCl was added only to neuralize the +4 charge of KALP. More on the `insane.py` tool can be found in separate tutorials, notably setting up a complex bilayer ([lipid tutorial part II](../LipidsII/index.qmd)).

<hr>

#### Option 2: `COBY`

blah blah blah

<sup>[\[9\]](#references)</sup>

https://github.com/MikkelDA/COBY 

https://github.com/MikkelDA/COBY/tree/master/Tutorial 

<hr>

You can now proceed as before and set up the production run. To recap, this involves the following steps:

(A) Edit the `system.top` file to match the Martini version you are using, and make sure it includes the correct topology files via `#include` statements.
(B) Download or copy the necessary Martini 3 `.itp` files, including `martini_v3.0.0_phospholipids_v1.itp`.
(C) Ensure that the molecule names in your coordinate and topology files are consistent.
(D) Obtain the appropriate `.mdp` files for energy minimization, equilibration, and production runs. These can be downloaded or copied from the `template/` folder included with this module’s zip file. Modify them as needed — **for bilayer systems, make sure to use semi-isotropic pressure coupling and consider applying separate thermostat coupling groups**.
(E) Run the minimization and equilibration steps before launching the production simulation.

## Going further {#proteins-in-membrane-environment}

### Studying the impact of lipid composition.
Generate a new system in which membrane thickness is reduced (different the lipid type, DLPC for instance). Observe how the thickness is affecting the tilt of the transmembrane helix; compare it to the previous simulation.

### Studying peptide dimerization.
Double these previous boxes in one dimension (`gmx genconf`) and rerun the simulations. Observe the different dimerization conformations (parallel or anti-parallel tilts). Note that more than one simulation (or a longer one) might be required to observe both cases!

### Tools and scripts used in this tutorial {#tools-and-scripts-used-in-this-tutorial}

<hr>

-   `GROMACS` (<http://www.gromacs.org/>)

-   `VMD` (<https://www.ks.uiuc.edu/Research/vmd/>)

-   `martinize2` (<https://github.com/marrink-lab/vermouth-martinize>)

-   `insane` (downloadable [here](../../../downloads/tools/topology-structure-generation.qmd#insane))

### References {#references}

<hr>

\[1\] Monticelli, L.; Kandasamy, S. K.; Periole, X.; Larson, R. G.; Tieleman, D. P.; Marrink, S.-J. The MARTINI Coarse-Grained Force Field: Extension to Proteins. J. Chem. Theory Comput. 2008, 4 (5), 819–834. https://doi.org/10.1021/ct700324x.

\[2\] Ramadurai, S.; Holt, A.; Schäfer, L. V.; Krasnikov, V. V.; Rijkers, D. T. S.; Marrink, S. J.; Killian, J. A.; Poolman, B. Influence of Hydrophobic Mismatch and Amino Acid Composition on the Lateral Diffusion of Transmembrane Peptides. Biophys. J. 2010, 99 (5), 1447–1454. https://doi.org/10.1016/J.BPJ.2010.05.042.

\[3\] Marrink, S. J.; Corradi, V.; Souza, P. C. T.; Ingólfsson, H. I.; Tieleman, D. P.; Sansom, M. S. P. Computational Modeling of Realistic Cell Membranes. Chem. Rev. 2019, 119 (9), 6184–6226. https://doi.org/10.1021/acs.chemrev.8b00460.

\[4\] Periole, X.; Cavalli, M.; Marrink, S.-J.; Ceruso, M. A. Combining an Elastic Network With a Coarse-Grained Molecular Force Field: Structure, Dynamics, and Intermolecular Recognition. J. Chem. Theory Comput. 2009, 5 (9), 2531–2543. https://doi.org/10.1021/ct9002114.

\[5\] Souza, P.C.T., Borges-Araújo, L., Brasnett, C. et al. GōMartini 3: From large conformational changes in proteins to environmental bias corrections. Nat Commun 16, 4051 (2025). https://doi.org/10.1038/s41467-025-58719-0 

\[6\] Pedersen, K.B., Borges-Araújo, L., Stange, A.D., Souza, P.C.T., Marrink, S.J., and Schiøtt, B. OLIVES: A Go̅-like Model for Stabilizing Protein Structure via Hydrogen Bonding Native Contacts in the Martini 3 Coarse-Grained Force Field. Journal of Chemical Theory and Computation 2024 20 (18), 8049-8070 https://doi.org/10.1021/acs.jctc.4c00553

\[7\] Spinti, J.K, Nunes, F.N., Melo, M.N. Room for improvement in the initial martini 3 parameterization of peptide interactions,
Chemical Physics Letters, Volume 819, 2023, 140436, 0009-2614, https://doi.org/10.1016/j.cplett.2023.140436.

\[8\] Wassenaar, T. A.; Ingólfsson, H. I.; Böckmann, R. A.; Tieleman, D. P.; Marrink, S. J. Computational Lipidomics with Insane : A Versatile Tool for Generating Custom Membranes for Molecular Simulations. J. Chem. Theory Comput. 2015, 11 (5), 2144–2155. https://doi.org/10.1021/acs.jctc.5b00209.

\[9\] Andreasen, M.D., Souza, P.C.T., Schiøtt, B., and Zuzic, L. Creating Coarse-Grained Systems with COBY: Toward Higher Accuracy of Complex Biological Systems. Journal of Chemical Information and Modeling 2025 65 (10), 4760-4766 https://doi.org/10.1021/acs.jcim.5c00069 