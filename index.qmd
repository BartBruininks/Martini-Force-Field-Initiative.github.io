---
pagetitle: "Martini Force-Field Initiative"
page-layout: custom
section-divs: false
toc: false
css: home.scss
editor: source
execute:
  echo: false
description: | 
  A General Purpose Coarse-Grained Force Field.
hide-description: true
resources: 
  - images/martini.gif
---

```{=HTML}
<head>
  <style>
    .image-slider-container {
      position: relative;
      width: 100%;
      height: 100%;
      padding-bottom: 40px; /* Adjust this value to maintain constant distance */
    }

    .image-slider {
      width: 100%;
      height: 100%;
      position: relative;
      overflow: hidden;
    }
    
    .image-slider img {
      width: 100%;
      height: 100%;
      object-fit: cover; 
      position: absolute;
      top: 0;
      left: 0;
      opacity: 0;
      transition: opacity 1s;
    }
    
    .image-slider img.active {
      opacity: 1;
    }
    
    .dots {
      position: absolute;
      bottom: 20px; /* Adjust this value to maintain constant distance from the bottom of the container */
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      gap: 10px;
    }
    
    .dots .dot {
      width: 10px;
      height: 10px;
      background-color: #ccc;
      border-radius: 50%;
      cursor: pointer;
      transition: background-color 0.3s;
    }
    
    .dots .dot.active {
      background-color: #2d5c80;
    }
  </style>
</head>

<!--  It doesn't work with class. We need to put style  -->
<div style="flex-direction: column; width: 100%; height: 120vh; margin-top: -185px; background-size: cover; background-position: center; background-repeat: no-repeat; overflow: hidden; overflow: clip; contain: content; display: flex; align-items: center; justify-content: center; background: #f0f5f9;">

<css-doodle>
  <style>
    @grid: 50x1 / 50vmin;
    :container {
      perspective: 58vmin;
    }
    background: @m(
      @r(200, 240), 
      radial-gradient(
        @p(blue, green, yellow, white) 15%,
        transparent 40%
      ) @r(100%) @r(100%) / @r(1%, 3%) @lr no-repeat
    );

    @size: 50%;
    @place-cell: center;

    border-radius: 50%;
    transform-style: preserve-3d;
    animation: scale-up 28s linear infinite;
    animation-delay: calc(@i * -.6s);

    @keyframes scale-up {
      0% {
        opacity: 0;
        transform: translate3d(0, 0, 0) rotate(0);
      }
      10% { 
        opacity: 1; 
      }
      95% {
        transform:
          translate3d(0, 0, @r(50vmin, 55vmin))
          rotate(@r(-360deg, 360deg));
      }
      100% {
        opacity: 0;
        transform: translate3d(0, 0, 1vmin);
      }
    }
  </style>
</css-doodle>

<h1 style="font-size: 2.3em; color: #2d5c80; text-align: center;"> Welcome to the Martini Force Field Initiative </h1>
<h5 style="font-size: 1.3em; color: #2d5c80; text-align: center;"> A general purpose coarse-grained force field for biomolecular simulations </h5>

<div class="buttons">
<button class="btn-21" onclick="window.location='#learn-more'"> <span> Learn more </span> </button>
<button class="btn-21"> <span> Get started </span> </button>
</div>

</div>

<!-- Second div with an ID for anchoring -->
<div id="learn-more" style="display: flex; width: 100%; height: auto; background: #ffffff; padding: 15px;">

  <!-- Left side with text -->
  <div style="flex: 1; display: flex; flex-direction: column; justify-content: center; padding: 20px;">
    <h2 style="font-size: 2em; color: #2d5c80;">About the Martini Force Field Initiative</h2>
    <p style="font-size: 1.1em; color: #2d5c80;">
      Martini is a coarse-grained (CG) force field suited for molecular dynamics simulations of biomolecular systems. The force field has been parametrized in a systematic way, combining top-down and bottum-up strategies: i- non-bonded interactions are based on the reproduction of experimental partitioning free energies between polar and apolar phases of a large number of chemical compounds, whereas ii- bonded interactions are derived from reference all-atom simulations.
    </p>
    <p style="font-size: 1.1em; color: #2d5c80;">
      The model uses a four-to-one mapping scheme, i.e. on average four heavy atoms and associated hydrogens are represented by a single interaction center. In order to keep the model simple, only four main types of interaction sites are defined: polar, non-polar, apolar, and charged. Each particle type has a number of subtypes, which allow for an accurate representation of the chemical nature of the underlying atomistic representation.
    </p>
    <p style="font-size: 1.1em; color: #2d5c80;">
      Currently topologies are available for many lipids and surfactant molecules, including cholesterol, and for all amino acids and nucleotides as well as for a variety of sugars, polymers, and nanoparticles. Tools are furthermore available to build topologies for arbitrary peptides, proteins, polynucleotides, to add elastic networks, and to move between coarse-grained and atomistic representations.
    </p>
  </div>

  <!-- Right side with images -->
  <div style="flex: 1; display: flex; align-items: center; overflow: hidden; position: relative;">
    <div class="image-slider-container" style="width: 100%; height: 100%; position: relative;">
      <div class="image-slider" style="width: 100%; height: 100%; position: relative;">

        <!-- Images -->
        <img src="images/favicon.png" alt="Simulation 1" class="slide active">
        <img src="images/favicon.png" alt="Simulation 2" class="slide">
        <img src="images/favicon.png" alt="Simulation 3" class="slide">
        <!-- Add more images as needed -->

      </div>

      <!-- Navigation dots -->
      <div class="dots">
        <div class="dot active" onclick="currentSlide(0)"></div>
        <div class="dot" onclick="currentSlide(1)"></div>
        <div class="dot" onclick="currentSlide(2)"></div>
        <!-- Add more dots as needed -->
      </div>
    </div>
  </div>

</div>

<!-- JavaScript for automatic slideshow -->
<script>
  let currentSlideIndex = 0;
  const slides = document.querySelectorAll('.image-slider .slide');
  const dots = document.querySelectorAll('.dots .dot');
  const totalSlides = slides.length;

  function showSlide(index) {
    slides.forEach((slide, i) => {
      slide.classList.toggle('active', i === index);
    });
    dots.forEach((dot, i) => {
      dot.classList.toggle('active', i === index);
    });
    currentSlideIndex = index;
  }

  function showNextSlide() {
    const nextSlideIndex = (currentSlideIndex + 1) % totalSlides;
    showSlide(nextSlideIndex);
  }

  function currentSlide(index) {
    showSlide(index);
  }

  setInterval(showNextSlide, 2000);

  // Initially show the first slide
  showSlide(0);
</script>

<script src="doodle.js"></script>
```